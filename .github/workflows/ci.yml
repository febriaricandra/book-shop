name: Golang CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      # Build the application
      - name: Build
        run: go build -v ./cmd/app/main.go

      # Run tests
      - name: Test
        run: go test -v ./tests/features

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Checkout code repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up SSH for deployment
      - name: Setup SSH
        env: 
          SSH_PRIVATE_KEY: ${{ secrets.VPS_SSH_KEY }}
          SERVER_IP: ${{ secrets.VPS_IP }}
          SERVER_USERNAME: ${{ secrets.VPS_USERNAME }}
          SERVER_PORT: ${{ secrets.VPS_PORT }}
        run: |
          # Save the private key to a file
          echo "$SSH_PRIVATE_KEY" > private_key
          chmod 600 private_key

          # Create .ssh directory if it doesn't exist
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Add server to known_hosts
          ssh-keyscan -p $SERVER_PORT $SERVER_IP >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      # Deploy and restart service on the server
      - name: Deploy to server
        env:
          SERVER_IP: ${{ secrets.VPS_IP }}
          SERVER_USERNAME: ${{ secrets.VPS_USERNAME }}
          SERVER_PORT: ${{ secrets.VPS_PORT }}
        run: |
          ssh -i private_key -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_IP -p $SERVER_PORT << 'EOF'
            # Navigate to the deployment directory
            cd /home/febriaricandra/bookshop

            # Pull the latest changes
            git pull origin main

            # Build the application on the server
            go mod tidy
            go build -o main ./cmd/app/main.go

            # Restart the service
            sudo systemctl daemon-reload
            sudo systemctl restart bookshop.service
            sudo systemctl enable bookshop.service
          EOF

      # Cleanup SSH private key
      - name: Cleanup
        run: rm -f private_key
